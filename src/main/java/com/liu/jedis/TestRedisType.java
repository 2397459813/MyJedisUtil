package com.liu.jedis;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import org.apache.log4j.Logger;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.Pipeline;
import util.RedisUtil;

public class TestRedisType {
	private static Logger logger = Logger.getLogger(TestRedisType.class);

	public static void main(String[] args) throws InterruptedException {
		Jedis jedis = RedisUtil.getJedis();
		TestRedisType.testString(jedis);
		// TestRedisType.testMap(jedis);
		// TestRedisType.testList(jedis);
		// TestRedisType.testSet(jedis);
		//testPipeLineAndNormal(jedis);
		RedisUtil.close(jedis);
	}

	/**
	 * 字符串测试
	 * 
	 * @param jedis
	 */

	public static void testString(Jedis jedis) {
		jedis.set("name", "hello jedis!");// 向key-->name中放入了value-->xinxin
		System.out.println(jedis.get("name"));// 执行结果：xinxin

		jedis.append("name", " is my lover"); // 拼接
		System.out.println(jedis.get("name"));

		jedis.del("name"); // 删除某个键
		System.out.println(jedis.get("name"));
		// 设置多个键值对
		jedis.mset("name", "某某某", "age", "24", "qq", "476777XXX");
		jedis.incr("age"); // 进行加1操作
		System.out.println(jedis.get("name") + "-" + jedis.get("age") + "-" + jedis.get("qq"));
	}

	/**
	 * map 用法
	 * 
	 * @param jedis
	 */
	public static void testMap(Jedis jedis) {
		// -----添加数据----------
		Map<String, String> map = new HashMap<String, String>();
		map.put("name", "xinxin");
		map.put("age", "22");
		map.put("qq", "123456");
		jedis.hmset("user", map);
		// 取出user中的name，执行结果:[minxr]-->注意结果是一个泛型的List
		// 第一个参数是存入redis中map对象的key，后面跟的是放入map中的对象的key，后面的key可以跟多个，是可变参数
		List<String> rsmap = jedis.hmget("user", "name", "age");
		System.out.println(rsmap);

		// 删除map中的某个键值
		jedis.hdel("user", "age");
		System.out.println(jedis.hmget("user", "age")); // 因为删除了，所以返回的是null
		System.out.println(jedis.hlen("user")); // 返回key为user的键中存放的值的个数2
		System.out.println(jedis.exists("user"));// 是否存在key为user的记录 返回true
		System.out.println(jedis.hkeys("user"));// 返回map对象中的所有key
		System.out.println(jedis.hvals("user"));// 返回map对象中的所有value

		Iterator<String> iter = jedis.hkeys("user").iterator();
		while (iter.hasNext()) {
			String key = iter.next();
			System.out.println(key + ":" + jedis.hmget("user", key));
		}
	}

	/**
	 * jedis操作List
	 */
	public static void testList(Jedis jedis) {
		// 开始前，先移除所有的内容
		jedis.del("java framework");
		System.out.println(jedis.lrange("java framework", 0, -1));
		// 先向key java framework中存放三条数据
		jedis.lpush("java framework", "spring");
		jedis.lpush("java framework", "struts");
		jedis.lpush("java framework", "hibernate");
		// 再取出所有数据jedis.lrange是按范围取出，
		// 第一个是key，第二个是起始位置，第三个是结束位置，jedis.llen获取长度 -1表示取得所有
		System.out.println(jedis.lrange("java framework", 0, -1));

		jedis.del("java framework");
		jedis.rpush("java framework", "spring");
		jedis.rpush("java framework", "struts");
		jedis.rpush("java framework", "hibernate");
		System.out.println(jedis.lrange("java framework", 0, -1));
	}

	/**
	 * jedis操作Set
	 */
	public static void testSet(Jedis jedis) {
		// 添加
		jedis.sadd("user1", "liuling");
		jedis.sadd("user1", "xinxin");
		jedis.sadd("user1", "ling");
		jedis.sadd("user1", "zhangxinxin");
		jedis.sadd("user1", "who");
		// 移除noname
		jedis.srem("user1", "who");
		System.out.println(jedis.smembers("user1"));// 获取所有加入的value
		System.out.println(jedis.sismember("user1", "who"));// 判断 who
															// 是否是user集合的元素
		System.out.println(jedis.srandmember("user1"));
		System.out.println(jedis.scard("user1"));// 返回集合的元素个数
	}

	
	
	
	public static void testPipeLineAndNormal(Jedis jedis) throws InterruptedException {
		
		long start = System.currentTimeMillis();
		for (int i = 0; i < 100; i++) {
			jedis.set(String.valueOf(i), String.valueOf(i));
		}
		long end = System.currentTimeMillis();
		logger.info("the jedis total time is:" + (end - start));

		Pipeline pipe = jedis.pipelined();// 先创建一个pipeline的链接对象
		//jedis.pipelined
		long start_pipe = System.currentTimeMillis();
		for (int i = 0; i < 100; i++) {
			pipe.set(String.valueOf(i), String.valueOf(i));
		}
		pipe.sync();// 获取所有的response
		long end_pipe = System.currentTimeMillis();
		logger.info("the pipe total time is:" + (end_pipe - start_pipe));

		BlockingQueue<String> logQueue = new LinkedBlockingQueue<String>();
		long begin = System.currentTimeMillis();
		for (int i = 0; i < 100; i++) {
			logQueue.put("i=" + i);
		}
		long stop = System.currentTimeMillis();
		logger.info("the BlockingQueue total time is:" + (stop - begin));
	}
	
	
	
	
	

}
